apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: osdu-deployer-with-tno-dataload
  namespace: default
spec:
  params:
  - name: namespace
    type: string
    default: default
  - name: cpd-pipeline-name
    type: string
    default: cloud-pak-deployer-5.0.x
  - default: himalay
    name: access_key_id
    type: string
  - default: himalay
    name: secret_access_key
    type: string
  - default: 849574731431.dkr.ecr.us-east-1.amazonaws.com/ansible-installer:techzone-updated
    name: ansible_image
    type: string
  - default: KQb49EqxpuXhNG-f
    name: partition_admin_password
    type: string
  - default: cpd
    name: proj_name
    type: string
  - default: cpd-operators
    name: cpd_proj_name
    type: string
  - default: letsencrypt-certs
    name: router_certs
    type: string
  tasks:
  - name: wait-for-cpd-pipeline
    params:
    - name: cpd-pipeline-name
      value: $(params.cpd-pipeline-name)
    - name: namespace
      value: $(params.namespace)
    taskSpec:
      params:
      - name: cpd-pipeline-name
        type: string
      - name: namespace
        type: string
      steps:
      - image: registry.access.redhat.com/ubi9/ubi:latest
        name: wait-for-cpd-pipeline
        script: |
          #!/bin/bash
          set -e
          set -x

          # Install oc CLI
          dnf install -y wget
          wget https://mirror.openshift.com/pub/openshift-v4/x86_64/clients/ocp/4.16.0/openshift-client-linux-4.16.0.tar.gz
          tar -xvzf openshift-client-linux-4.16.0.tar.gz -C /usr/local/bin/
          
          # Login to the OpenShift cluster
          oc login --token=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token) https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_SERVICE_PORT --insecure-skip-tls-verify
          
          CPD_PIPELINE_NAME=$(params.cpd-pipeline-name)
          CPD_NAMESPACE=$(params.namespace)

          # Check if the pipeline exists
          if ! oc get pipeline $CPD_PIPELINE_NAME -n $CPD_NAMESPACE; then
            echo "Pipeline $CPD_PIPELINE_NAME not found. Creating it..."
            oc create -f https://raw.githubusercontent.com/cloud-native-toolkit/deployer-cloud-pak-deployer/refs/heads/main/cp4d/5.0.x/cp4d-cloud-pak-deployer-pipeline.yaml -n $CPD_NAMESPACE
          fi

          # Check for an existing PipelineRun
          PIPELINERUN=$(oc get pipelinerun -n $CPD_NAMESPACE -l tekton.dev/pipeline=$CPD_PIPELINE_NAME -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || true)

          if [ -z "$PIPELINERUN" ]; then
            echo "No existing PipelineRun found for pipeline $CPD_PIPELINE_NAME. Creating a new one..."
            oc create -f https://raw.githubusercontent.com/cloud-native-toolkit/deployer-cloud-pak-deployer/refs/heads/main/cp4d/5.0.x/cp4d-cloud-pak-deployer-pipeline-run.yaml -n $CPD_NAMESPACE
            sleep 60
            PIPELINERUN=$(oc get pipelinerun -n $CPD_NAMESPACE -l tekton.dev/pipeline=$CPD_PIPELINE_NAME -o jsonpath='{.items[0].metadata.name}')
          fi

          # Wait for the PipelineRun to complete
          MAX_WAIT_TIME=$((6 * 60 * 60))  # 3 hours in seconds
          CHECK_INTERVAL=60  # 1 minute in seconds
          ELAPSED_TIME=0

          echo "Waiting for PipelineRun $PIPELINERUN to complete in namespace $CPD_NAMESPACE..."

          while [ $ELAPSED_TIME -lt $MAX_WAIT_TIME ]; do
            STATUS=$(oc get pipelinerun $PIPELINERUN -n $CPD_NAMESPACE -o jsonpath='{.status.conditions[0].reason}')
            echo "Current Status: $STATUS"

            if [ "$STATUS" == "Completed" ]; then
              echo "PipelineRun $PIPELINERUN has completed successfully."
              exit 0
            elif [ "$STATUS" == "Failed" ]; then
              echo "PipelineRun $PIPELINERUN has failed. Exiting."
              exit 1
            fi

            echo "PipelineRun not yet completed. Waiting for $CHECK_INTERVAL seconds..."
            sleep $CHECK_INTERVAL
            ELAPSED_TIME=$((ELAPSED_TIME + CHECK_INTERVAL))
          done

          echo "Timeout reached: PipelineRun $PIPELINERUN did not complete within the maximum wait time."
          exit 1
  - name: update-pull-secret
    params:
    - name: access_key_id
      value: $(params.access_key_id)
    - name: secret_access_key
      value: $(params.secret_access_key)
    taskSpec:
      params:
      - name: secret_access_key
        type: string
      - name: access_key_id
        type: string
      spec: null
      steps:
      - image: public.ecr.aws/o6l8m9v3/openshift-client-image:latest
        name: update-pull-secret
        script: |
          #!/bin/bash
          set -e
          set -x
          echo "Logging Into Openshift"
          oc login --token=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token) https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_SERVICE_PORT  --insecure-skip-tls-verify
          export AWS_ACCESS_KEY_ID="$(params.access_key_id)"
          export AWS_SECRET_ACCESS_KEY="$(params.secret_access_key)"
          export AWS_DEFAULT_REGION="us-east-1"
          echo "Updating Pull Secret"
          ./pull-secret-update-latest.sh
          sleep 120
  - name: import-image-to-registry
    params:
    - name: ansible_image
      value: $(params.ansible_image)
    - name: proj_name
      value: $(params.proj_name)
    - name: access_key_id
      value: $(params.access_key_id)
    runAfter:
    - update-pull-secret
    - wait-for-cpd-pipeline
    retries: 4
    taskSpec:
      params:
      - name: ansible_image
        type: string
      - name: proj_name
        type: string
      - name: access_key_id
        type: string
      spec: null
      steps:
      - image: public.ecr.aws/o6l8m9v3/openshift-client-image:latest
        name: import-image
        script: |
          #!/bin/bash
          set -e
          set -x
          echo "Displaying Access Key ID"
          echo "$(params.access_key_id)"
          echo "Logging into OpenShift..."

          oc login --token=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token) https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_SERVICE_PORT  --insecure-skip-tls-verify

          echo "Checking if ImageStream exists..."
          if ! oc get imagestream ansible-installer -n default &>/dev/null; then
            echo "ImageStream does not exist. Creating it..."
            oc create imagestream ansible-installer -n default
            echo "Importing the image into the OpenShift registry..."
            oc tag --source=docker "$(params.ansible_image)" default/ansible-installer:latest
          else
            echo "ImageStream already exists."
          fi
  - name: run-ansible-playbook
    params:
    - name: ansible_image
      value: $(params.ansible_image)
    - name: proj_name
      value: $(params.proj_name)
    - name: cpd_proj_name
      value: $(params.cpd_proj_name)
    - name: partition_admin_password
      value: $(params.partition_admin_password)
    - name: router_certs
      value: $(params.router_certs)
    retries: 4
    runAfter:
    - import-image-to-registry
    taskSpec:
      params:
      - name: proj_name
        type: string
      - name: cpd_proj_name
        type: string
      - name: router_certs
        type: string
      - name: partition_admin_password
        type: string
      - name: ansible_image
        type: string
      spec: null
      steps:
      - image: image-registry.openshift-image-registry.svc:5000/default/ansible-installer:latest
        name: run-ansible-playbook
        script: |
          #!/bin/bash
          set -e

          # Injecting Environment Variables from the pipeline parameters
          echo "Injecting Environment variables"

          cat <<EOF > /tmp/osdu_vars.sh
          export PARTITON_PASSWORD="$(params.partition_admin_password)"
          export PROJECT_NAME="$(params.proj_name)"
          export CPD_PROJECT_NAME="$(params.cpd_proj_name)"
          export ROUTER_CERT_NAME="$(params.router_certs)"
          EOF

          # Sourcing Environmental Variables
          echo "Sourcing Environmental Variables"
          chmod +x /tmp/osdu_vars.sh
          source /tmp/osdu_vars.sh

          # Updating the values of the odi-vars.yaml file with the environmental variables using sed
          echo "Injecting environment variables into odi-vars.yaml"
          sed -i \
              -e "s|\$PARTITON_PASSWORD|${PARTITON_PASSWORD}|g" \
              -e "s|\$PROJECT_NAME|${PROJECT_NAME}|g" \
              -e "s|\$CPD_PROJECT_NAME|${CPD_PROJECT_NAME}|g" \
              -e "s|\$ROUTER_CERT_NAME|${ROUTER_CERT_NAME}|g" \
              /playbooks/vars/odi-vars.yaml

          # Verification of the odi-vars.yaml file values
          echo "-------------------------------------------------------------------------------------------------------------------------------------------------------"
          echo "Displaying the odi-vars.yaml values"
          echo "-------------------------------------------------------------------------------------------------------------------------------------------------------"
          cat /playbooks/vars/odi-vars.yaml
          echo "-------------------------------------------------------------------------------------------------------------------------------------------------------"

          # Logging into OpenShift
          echo "Logging into OpenShift..."

          oc login --token=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token) https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_SERVICE_PORT  --insecure-skip-tls-verify


          # Executing Ansible scripts for pre-req and osdu operator installation
          echo "---------------------------------------------------------------------------------------------------------------------------------------------------------"
          echo "Installation of pre-req and osdu operators are started. Wait for 30 mins"
          echo "---------------------------------------------------------------------------------------------------------------------------------------------------------"
          ANSIBLE_STDOUT_CALLBACK=yaml ansible-playbook /playbooks/odi-install/pre-install.yml --extra-vars "@/playbooks/vars/odi-vars.yaml"
        volumeMounts:
        - mountPath: /workspace/source/odi-install
          name: odi-volume
        workingDir: /workspace/source
      volumes:
      - name: odi-volume
      workspaces:
      - name: source
    workspaces:
    - name: source
      workspace: source
  - name: post-install
    params:
    - name: ansible_image
      value: $(params.ansible_image)
    - name: proj_name
      value: $(params.proj_name)
    - name: cpd_proj_name
      value: $(params.cpd_proj_name)
    - name: partition_admin_password
      value: $(params.partition_admin_password)
    - name: router_certs
      value: $(params.router_certs)
    retries: 4
    runAfter:
    - run-ansible-playbook
    taskSpec:
      params:
      - name: proj_name
        type: string
      - name: cpd_proj_name
        type: string
      - name: router_certs
        type: string
      - name: partition_admin_password
        type: string
      spec: null
      steps:
      - image: image-registry.openshift-image-registry.svc:5000/default/ansible-installer:latest
        name: post-install
        script: |
          #!/bin/bash
          set -e
          # Injecting Environment Variables from the pipeline parameters
          echo "Injecting Environment variables"

          cat <<EOF > /tmp/osdu_vars.sh
          export PARTITON_PASSWORD="$(params.partition_admin_password)"
          export PROJECT_NAME="$(params.proj_name)"
          export CPD_PROJECT_NAME="$(params.cpd_proj_name)"
          export ROUTER_CERT_NAME="$(params.router_certs)"
          EOF

          # Sourcing Environmental Variables
          echo "Sourcing Environmental Variables"
          chmod +x /tmp/osdu_vars.sh
          source /tmp/osdu_vars.sh

          # Updating the values of the odi-vars.yaml file with the environmental variables using sed
          echo "Injecting environment variables into odi-vars.yaml"
          sed -i \
              -e "s|\$PARTITON_PASSWORD|${PARTITON_PASSWORD}|g" \
              -e "s|\$PROJECT_NAME|${PROJECT_NAME}|g" \
              -e "s|\$CPD_PROJECT_NAME|${CPD_PROJECT_NAME}|g" \
              -e "s|\$ROUTER_CERT_NAME|${ROUTER_CERT_NAME}|g" \
              /playbooks/vars/odi-vars.yaml

          # Verification of the odi-vars.yaml file values
          echo "------------------------------------------------------------------------------------------------------------------------------------------------------"
          echo "Displaying the odi-vars.yaml values"
          echo "------------------------------------------------------------------------------------------------------------------------------------------------------"
          cat /playbooks/vars/odi-vars.yaml
          echo "------------------------------------------------------------------------------------------------------------------------------------------------------"
          # Logging into OpenShift
          echo "Logging into OpenShift..."
          oc login --token=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token) https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_SERVICE_PORT  --insecure-skip-tls-verify

          # Executing Ansible scripts for pre-req and osdu operator installation
          echo "---------------------------------------------------------------------------------------------------------------------------------------------------------"
          echo "Post Installation Started. Wait for 30 mins"
          echo "---------------------------------------------------------------------------------------------------------------------------------------------------------"

          ANSIBLE_STDOUT_CALLBACK=yaml ansible-playbook /playbooks/odi-install/post-install.yml --extra-vars="@/playbooks/vars/odi-vars.yaml"
        volumeMounts:
        - mountPath: /workspace/source/odi-install
          name: odi-volume
        workingDir: /workspace/source
      volumes:
      - name: odi-volume
      workspaces:
      - name: source
    workspaces:
    - name: source
      workspace: source
  - name: sanity-test
    params:
    - name: ansible_image
      value: $(params.ansible_image)
    - name: proj_name
      value: $(params.proj_name)
    - name: cpd_proj_name
      value: $(params.cpd_proj_name)
    - name: partition_admin_password
      value: $(params.partition_admin_password)
    - name: router_certs
      value: $(params.router_certs)
    retries: 4
    runAfter:
    - post-install
    taskSpec:
      params:
      - name: proj_name
        type: string
      - name: cpd_proj_name
        type: string
      - name: router_certs
        type: string
      - name: partition_admin_password
        type: string
      - name: ansible_image
        type: string
      spec: null
      steps:
      - image: image-registry.openshift-image-registry.svc:5000/default/ansible-installer:latest
        name: sanity-test
        script: |
          #!/bin/bash

          set -e
          # Injecting Environment Variables from the pipeline parameters
          echo "Injecting Environment variables"

          cat <<EOF > /tmp/osdu_vars.sh
          export PARTITON_PASSWORD="$(params.partition_admin_password)"
          export PROJECT_NAME="$(params.proj_name)"
          export CPD_PROJECT_NAME="$(params.cpd_proj_name)"
          export ROUTER_CERT_NAME="$(params.router_certs)"
          EOF

          # Sourcing Environmental Variables
          echo "Sourcing Environmental Variables"
          chmod +x /tmp/osdu_vars.sh
          source /tmp/osdu_vars.sh

          # Updating the values of the odi-vars.yaml file with the environmental variables using sed
          echo "Injecting environment variables into odi-vars.yaml"
          sed -i \
              -e "s|\$PARTITON_PASSWORD|${PARTITON_PASSWORD}|g" \
              -e "s|\$PROJECT_NAME|${PROJECT_NAME}|g" \
              -e "s|\$CPD_PROJECT_NAME|${CPD_PROJECT_NAME}|g" \
              -e "s|\$ROUTER_CERT_NAME|${ROUTER_CERT_NAME}|g" \
              /playbooks/vars/odi-vars.yaml

          # Verification of the odi-vars.yaml file values
          echo "------------------------------------------------------------------------------------------------------------------------------------------------------"
          echo "Displaying the odi-vars.yaml values"
          echo "------------------------------------------------------------------------------------------------------------------------------------------------------"
          cat /playbooks/vars/odi-vars.yaml
          echo "------------------------------------------------------------------------------------------------------------------------------------------------------"
          # Logging into OpenShift
          echo "Logging into OpenShift..."
          oc login --token=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token) https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_SERVICE_PORT  --insecure-skip-tls-verify

          # Executing Ansible scripts for pre-req and osdu operator installation
          echo "---------------------------------------------------------------------------------------------------------------------------------------------------------"
          echo "Post Installation Started. Wait for 30 mins"
          echo "---------------------------------------------------------------------------------------------------------------------------------------------------------"

          ANSIBLE_STDOUT_CALLBACK=yaml ansible-playbook /playbooks/odi-install/sanity-test.yml --extra-vars="@/playbooks/vars/odi-vars.yaml"
        volumeMounts:
        - mountPath: /workspace/source/odi-install
          name: odi-volume
        workingDir: /workspace/source
      volumes:
      - name: odi-volume
      workspaces:
      - name: source
    workspaces:
    - name: source
      workspace: source
  - name: smoke-test
    params:
    - name: ansible_image
      value: $(params.ansible_image)
    - name: proj_name
      value: $(params.proj_name)
    - name: cpd_proj_name
      value: $(params.cpd_proj_name)
    - name: partition_admin_password
      value: $(params.partition_admin_password)
    - name: router_certs
      value: $(params.router_certs)
    retries: 4
    runAfter:
    - sanity-test
    taskSpec:
      params:
      - name: proj_name
        type: string
      - name: cpd_proj_name
        type: string
      - name: router_certs
        type: string
      - name: partition_admin_password
        type: string
      - name: ansible_image
        type: string
      spec: null
      steps:
      - image: image-registry.openshift-image-registry.svc:5000/default/ansible-installer:latest
        name: run-ansible-playbook
        script: |
          #!/bin/bash
          set -e
          # Injecting Environment Variables from the pipeline parameters
          echo "Injecting Environment variables"

          cat <<EOF > /tmp/osdu_vars.sh
          export PARTITON_PASSWORD="$(params.partition_admin_password)"
          export PROJECT_NAME="$(params.proj_name)"
          export CPD_PROJECT_NAME="$(params.cpd_proj_name)"
          export ROUTER_CERT_NAME="$(params.router_certs)"
          EOF

          # Sourcing Environmental Variables
          echo "Sourcing Environmental Variables"
          chmod +x /tmp/osdu_vars.sh
          source /tmp/osdu_vars.sh

          # Updating the values of the odi-vars.yaml file with the environmental variables using sed
          echo "Injecting environment variables into odi-vars.yaml"
          sed -i \
              -e "s|\$PARTITON_PASSWORD|${PARTITON_PASSWORD}|g" \
              -e "s|\$PROJECT_NAME|${PROJECT_NAME}|g" \
              -e "s|\$CPD_PROJECT_NAME|${CPD_PROJECT_NAME}|g" \
              -e "s|\$ROUTER_CERT_NAME|${ROUTER_CERT_NAME}|g" \
              /playbooks/vars/odi-vars.yaml

          # Verification of the odi-vars.yaml file values
          echo "-------------------------------------------------------------------------------------------------------------------------------------------------------"
          echo "Displaying the odi-vars.yaml values"
          echo "-------------------------------------------------------------------------------------------------------------------------------------------------------"
          cat /playbooks/vars/odi-vars.yaml
          echo "-------------------------------------------------------------------------------------------------------------------------------------------------------"

          # Logging into OpenShift
          echo "Logging into OpenShift..."
          oc login --token=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token) https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_SERVICE_PORT  --insecure-skip-tls-verify

          # Executing Ansible scripts for pre-req and osdu operator installation
          echo "---------------------------------------------------------------------------------------------------------------------------------------------------------"
          echo "Smoke Test Started. Wait for 30 mins"
          echo "-------------------------------------------------------------------------------------------------------------------------------------------------------"

          ANSIBLE_STDOUT_CALLBACK=yaml ansible-playbook /playbooks/odi-install/smoke-test.yml --extra-vars="@/playbooks/vars/odi-vars.yaml"
        volumeMounts:
        - mountPath: /workspace/source/odi-install
          name: odi-volume
        workingDir: /workspace/source
      volumes:
      - name: odi-volume
      workspaces:
      - name: source
    workspaces:
    - name: source
      workspace: source
  - name: tno-dataloading
    params:
    - name: namespace
      value: $(params.proj_name)
    runAfter:
    - smoke-test
    taskSpec:
      params:
      - name: namespace
        type: string
      steps:
      - image: 849574731431.dkr.ecr.us-east-1.amazonaws.com/tno-dataload:techzone
        name: tno-dataload
        script: |
          #!/bin/bash
          oc login --token=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token) https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_SERVICE_PORT --insecure-skip-tls-verify 
          oc adm policy add-cluster-role-to-user cluster-admin -z pipeline -n $(params.namespace)
          ./create-tno-dataload-configmap.sh
          sleep 30    
          oc create sa dataload-update -n $(params.namespace)
          sleep 30
          
          oc create -f tno-dataload-task.yaml -n $(params.namespace)
           
          
          sleep 60
          
          oc create -f tno-dataload-task-run.yaml -n $(params.namespace)
          
          
  workspaces:
  - name: source
